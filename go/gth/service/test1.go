package service

import (
	"context"
	"crypto/ecdsa"
	"encoding/hex"
	"fmt"
	"log"
	"math"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind/v2"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/ethereum/go-ethereum/rpc"
	token "github.com/test/gth/erc20"
)

var API_URL string = "https://eth-sepolia.g.alchemy.com/v2/N0om5ad-ztv7kJJqcwL84NG5J2uQtrS9"

func QueryBlock() {
	// 连接以太坊客户端
	client, err := ethclient.Dial(API_URL)
	if err != nil {
		log.Fatal("Failed to connect to the Ethereum client: ", err)
	}
	defer client.Close()
	// 获取最新区块
	header, err := client.HeaderByNumber(context.Background(), nil)
	if err != nil {
		log.Fatal("Failed to get block number: ", err)
	}
	log.Printf("Block number: %d", header.Number.Uint64())
	block, err := client.BlockByNumber(context.Background(), header.Number)
	if err != nil {
		log.Fatal("Failed to get block: ", err)
	}
	fmt.Println("Block Hash: ", block.Hash().Hex())
	fmt.Println(len(block.Transactions()))
	count, err := client.TransactionCount(context.Background(), block.Hash())
	if err != nil {
		log.Fatal("Failed to get transaction count: ", err)
	}
	fmt.Println(count)
}

// 查询交易
func QueryTransaction() {
	client, err := ethclient.Dial(API_URL)
	if err != nil {
		log.Fatal("Failed to connect to the Ethereum client: ", err)
	}
	defer client.Close()
	block, err := client.BlockByNumber(context.Background(), nil)
	if err != nil {
		log.Fatal("Failed to get block: ", err)
	}
	chainID, err := client.ChainID(context.Background())
	if err != nil {
		log.Fatal("Failed to get chain ID: ", err)
	}
	for _, tx := range block.Transactions() {
		fmt.Println("Transaction Hash: ", tx.Hash().Hex())
		if sender, err := types.Sender(types.NewEIP155Signer(chainID), tx); err == nil {
			fmt.Println("Sender: ", sender.Hex())
		}
		receipt, err := client.TransactionReceipt(context.Background(), tx.Hash())
		if err != nil {
			log.Fatal("Failed to get transaction receipt: ", err)
		}
		fmt.Println("Transaction Status: ", receipt.Status)
		break

	}
}

// 查询收据
func QueryReceipt() {
	client, err := ethclient.Dial(API_URL)
	if err != nil {
		log.Fatal("Failed to connect to the Ethereum client: ", err)
	}
	defer client.Close()
	// 获取最新的区块
	block, err := client.BlockByNumber(context.Background(), nil)
	if err != nil {
		log.Fatal("Failed to get block: ", err)
	}
	receipts, err := client.BlockReceipts(context.Background(), rpc.BlockNumberOrHashWithHash(block.Hash(), false))
	if err != nil {
		log.Fatal("Failed to get receipts: ", err)
	}
	for _, receipt := range receipts {
		fmt.Println("Transaction Hash: ", receipt.TxHash.Hex())
		fmt.Println(receipt.Status)
		break
	}

}

// 查询账户余额
func QueryBalance(_addr string) big.Float {
	client, err := ethclient.Dial(API_URL)
	if err != nil {
		log.Fatal("Failed to connect to the Ethereum client: ", err)
	}
	defer client.Close()
	account := common.HexToAddress(_addr)
	balance, err := client.BalanceAt(context.Background(), account, nil)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(balance)
	fbalance := new(big.Float)
	fbalance.SetString(balance.String())
	ethValue := new(big.Float).Quo(fbalance, big.NewFloat(math.Pow10(18)))
	fmt.Println(ethValue)
	return *ethValue
}

// 查询代币余额
func QueryContractBalance() {
	fmt.Println("=======查询代币余额===========")
	client, err := ethclient.Dial(API_URL)
	if err != nil {
		log.Fatal(err)
	}
	defer client.Close()

	// 合约地址
	tokenAddress := common.HexToAddress("0x8F9e07F4D2c6bee9c335678fad0edCb9F85e8C32")
	instance, err := token.NewErc20(tokenAddress, client)
	if err != nil {
		log.Fatal(err)
	}
	address := common.HexToAddress("0x5037e87D1ec095e35Ec49DE146e9f5A84A8a5B1f")
	bal, err := instance.BalanceOf(&bind.CallOpts{}, address)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(bal)
	name, err := instance.Name(&bind.CallOpts{})
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(name)
}

// 订阅区块
func SubscribeBlock() {
	fmt.Println("==========订阅区块===========")
	client, err := ethclient.Dial("wss://eth-sepolia.g.alchemy.com/v2/N0om5ad-ztv7kJJqcwL84NG5J2uQtrS9")
	if err != nil {
		log.Fatalln("client err", err)
	}
	defer client.Close()
	headers := make(chan *types.Header)
	sub, err := client.SubscribeNewHead(context.Background(), headers)
	if err != nil {
		log.Fatalf("sub err %v", err)
	}
	// 监听
	for {
		select {
		case err := <-sub.Err():
			log.Fatal("select err", err)
		case header := <-headers:
			fmt.Println(header.Hash().Hex())
		}
	}
}

const (
	contractBytecode = "6080604052600436106100f6575f3560e01c8063715018a611610089578063d586b74c11610058578063d586b74c14610315578063dd62ed3e1461033f578063e086e5ec1461037b578063f2fde38b1461039157610105565b8063715018a61461026f5780638da5cb5b1461028557806395d89b41146102af578063a9059cbb146102d957610105565b806323b872dd116100c557806323b872dd146101a3578063313ce567146101df578063664e97041461020957806370a082311461023357610105565b806306fdde0314610109578063095ea7b3146101335780631249c58b1461016f57806318160ddd1461017957610105565b36610105576101036103b9565b005b5f80fd5b348015610114575f80fd5b5061011d610423565b60405161012a9190610fb8565b60405180910390f35b34801561013e575f80fd5b5061015960048036038101906101549190611069565b6104b3565b60405161016691906110c1565b60405180910390f35b6101776103b9565b005b348015610184575f80fd5b5061018d6104d5565b60405161019a91906110e9565b60405180910390f35b3480156101ae575f80fd5b506101c960048036038101906101c49190611102565b6104de565b6040516101d691906110c1565b60405180910390f35b3480156101ea575f80fd5b506101f361050c565b604051610200919061116d565b60405180910390f35b348015610214575f80fd5b5061021d610514565b60405161022a91906110e9565b60405180910390f35b34801561023e575f80fd5b5061025960048036038101906102549190611186565b61051c565b60405161026691906110e9565b60405180910390f35b34801561027a575f80fd5b50610283610561565b005b348015610290575f80fd5b50610299610574565b6040516102a691906111c0565b60405180910390f35b3480156102ba575f80fd5b506102c361059c565b6040516102d09190610fb8565b60405180910390f35b3480156102e4575f80fd5b506102ff60048036038101906102fa9190611069565b61062c565b60405161030c91906110c1565b60405180910390f35b348015610320575f80fd5b5061032961064e565b60405161033691906110e9565b60405180910390f35b34801561034a575f80fd5b50610365600480360381019061036091906111d9565b610659565b60405161037291906110e9565b60405180910390f35b348015610386575f80fd5b5061038f6106db565b005b34801561039c575f80fd5b506103b760048036038101906103b29190611186565b610777565b005b66038d7ea4c68000341015610403576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fa90611261565b60405180910390fd5b5f6305f5e1003461041491906112ac565b905061042033826107fb565b50565b6060600380546104329061131a565b80601f016020809104026020016040519081016040528092919081815260200182805461045e9061131a565b80156104a95780601f10610480576101008083540402835291602001916104a9565b820191905f5260205f20905b81548152906001019060200180831161048c57829003601f168201915b5050505050905090565b5f806104bd61087a565b90506104ca818585610881565b600191505092915050565b5f600254905090565b5f806104e861087a565b90506104f5858285610893565b610500858585610926565b60019150509392505050565b5f6012905090565b6305f5e10081565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610569610a16565b6105725f610a9d565b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546105ab9061131a565b80601f01602080910402602001604051908101604052809291908181526020018280546105d79061131a565b80156106225780601f106105f957610100808354040283529160200191610622565b820191905f5260205f20905b81548152906001019060200180831161060557829003601f168201915b5050505050905090565b5f8061063661087a565b9050610643818585610926565b600191505092915050565b66038d7ea4c6800081565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b6106e3610a16565b5f4790505f8111610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072090611394565b60405180910390fd5b610731610574565b73ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610773573d5f803e3d5ffd5b5050565b61077f610a16565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107ef575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016107e691906111c0565b60405180910390fd5b6107f881610a9d565b50565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361086b575f6040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161086291906111c0565b60405180910390fd5b6108765f8383610b60565b5050565b5f33905090565b61088e8383836001610d79565b505050565b5f61089e8484610659565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156109205781811015610911578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610908939291906113b2565b60405180910390fd5b61091f84848484035f610d79565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610996575f6040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161098d91906111c0565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a06575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016109fd91906111c0565b60405180910390fd5b610a11838383610b60565b505050565b610a1e61087a565b73ffffffffffffffffffffffffffffffffffffffff16610a3c610574565b73ffffffffffffffffffffffffffffffffffffffff1614610a9b57610a5f61087a565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610a9291906111c0565b60405180910390fd5b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bb0578060025f828254610ba491906113e7565b92505081905550610c7e565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610c39578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610c30939291906113b2565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cc5578060025f8282540392505081905550610d0f565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d6c91906110e9565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610de9575f6040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610de091906111c0565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e59575f6040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610e5091906111c0565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015610f42578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610f3991906110e9565b60405180910390a35b50505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610f8a82610f48565b610f948185610f52565b9350610fa4818560208601610f62565b610fad81610f70565b840191505092915050565b5f6020820190508181035f830152610fd08184610f80565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61100582610fdc565b9050919050565b61101581610ffb565b811461101f575f80fd5b50565b5f813590506110308161100c565b92915050565b5f819050919050565b61104881611036565b8114611052575f80fd5b50565b5f813590506110638161103f565b92915050565b5f806040838503121561107f5761107e610fd8565b5b5f61108c85828601611022565b925050602061109d85828601611055565b9150509250929050565b5f8115159050919050565b6110bb816110a7565b82525050565b5f6020820190506110d45f8301846110b2565b92915050565b6110e381611036565b82525050565b5f6020820190506110fc5f8301846110da565b92915050565b5f805f6060848603121561111957611118610fd8565b5b5f61112686828701611022565b935050602061113786828701611022565b925050604061114886828701611055565b9150509250925092565b5f60ff82169050919050565b61116781611152565b82525050565b5f6020820190506111805f83018461115e565b92915050565b5f6020828403121561119b5761119a610fd8565b5b5f6111a884828501611022565b91505092915050565b6111ba81610ffb565b82525050565b5f6020820190506111d35f8301846111b1565b92915050565b5f80604083850312156111ef576111ee610fd8565b5b5f6111fc85828601611022565b925050602061120d85828601611022565b9150509250929050565b7f4e6f7420656e6f756768204554482073656e74000000000000000000000000005f82015250565b5f61124b601383610f52565b915061125682611217565b602082019050919050565b5f6020820190508181035f8301526112788161123f565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6112b682611036565b91506112c183611036565b92508282026112cf81611036565b915082820484148315176112e6576112e561127f565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061133157607f821691505b602082108103611344576113436112ed565b5b50919050565b7f4e6f2045544820746f20776974686472617700000000000000000000000000005f82015250565b5f61137e601283610f52565b91506113898261134a565b602082019050919050565b5f6020820190508181035f8301526113ab81611372565b9050919050565b5f6060820190506113c55f8301866111b1565b6113d260208301856110da565b6113df60408301846110da565b949350505050565b5f6113f182611036565b91506113fc83611036565b92508282019050808211156114145761141361127f565b5b9291505056fea2646970667358221220d8697da37fd1c4958373ff488f6c0b4a05bf31db98fe66048a26039ff47b478864736f6c634300081a0033"
)

// 部署合约
func DepolyContract() {
	client, err := ethclient.Dial(API_URL)
	if err != nil {
		log.Fatal(err)
	}
	defer client.Close()
	privateKey, err := crypto.HexToECDSA("5dfa70af93caae5e723400a11c048806c24e14978a5c04bbc1ec6f19dbb9be1d")
	if err != nil {
		log.Fatal(err)
	}
	publicKey := privateKey.Public()
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		log.Fatal("error casting public key to ECDSA")
	}
	fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)
	nonce, err := client.PendingNonceAt(context.Background(), fromAddress)
	if err != nil {
		log.Fatal(err)
	}
	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		log.Fatal(err)
	}
	// 解码合约字节码
	data, err := hex.DecodeString(contractBytecode)
	if err != nil {
		log.Fatalln("decode err", err)
	}
	chainID, err := client.NetworkID(context.Background())
	if err != nil {
		log.Fatal(err)
	}
	tx := types.NewContractCreation(nonce, big.NewInt(0), 3000000, gasPrice, data)

	signedTx, err := types.SignTx(tx, types.NewEIP155Signer(chainID), privateKey)
	if err != nil {
		log.Fatal(err)
	}
	// 发送交易
	err = client.SendTransaction(context.Background(), signedTx)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(signedTx.Hash())

}
